-- VHDL Entity ece411.LRU_AND_TAGS.interface
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:29 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY LRU_AND_TAGS IS
   PORT( 
      Miss       : IN     std_logic;
      dirty0     : IN     std_logic;
      dirty1     : IN     std_logic;
      dirtying   : IN     std_logic;
      equal1     : IN     std_logic;
      lru        : IN     std_logic;
      tag0       : IN     LC3B_C_TAG;
      tag1       : IN     LC3B_C_TAG;
      valid0     : IN     std_logic;
      valid1     : IN     std_logic;
      wantedTag  : IN     LC3B_C_TAG;
      Replace0   : OUT    std_logic;
      newTagFlag : OUT    LC3B_OWORD;
      replace1   : OUT    std_logic;
      writeBack  : OUT    std_logic
   );

-- Declarations

END LRU_AND_TAGS ;

--
-- VHDL Architecture ece411.LRU_AND_TAGS.struct
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:32 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF LRU_AND_TAGS IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F       : std_logic;
   SIGNAL F1      : std_logic;
   SIGNAL HitFix  : LC3B_OWORD;
   SIGNAL MissFix : LC3B_OWORD;
   SIGNAL const1  : std_logic;
   SIGNAL dout    : std_logic;
   SIGNAL dout1   : std_logic;
   SIGNAL dout2   : std_logic;
   SIGNAL dout3   : std_logic;
   SIGNAL dout4   : std_logic;
   SIGNAL newTag  : LC3B_OWORD;
   SIGNAL newTag1 : LC3B_OWORD;
   SIGNAL newTag2 : LC3B_OWORD;
   SIGNAL newTag3 : LC3B_OWORD;
   SIGNAL notlru  : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL Replace0_internal : std_logic;
   SIGNAL replace1_internal : std_logic;


   -- Component Declarations
   COMPONENT OWordMux2
   PORT (
      A   : IN     LC3B_OWORD;
      B   : IN     LC3B_OWORD;
      Sel : IN     std_logic;
      F   : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT myAnd
   PORT (
      A : IN     std_logic;
      B : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT myOr
   PORT (
      A : IN     std_logic;
      B : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT newTagBuilder
   PORT (
      dirty0 : IN     std_logic;
      dirty1 : IN     std_logic;
      lru    : IN     std_logic;
      tag0   : IN     LC3B_C_TAG;
      tag1   : IN     LC3B_C_TAG;
      valid0 : IN     std_logic;
      valid1 : IN     std_logic;
      newTag : OUT    LC3B_OWORD
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : myAnd USE ENTITY ece411.myAnd;
   FOR ALL : myOr USE ENTITY ece411.myOr;
   FOR ALL : newTagBuilder USE ENTITY ece411.newTagBuilder;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.9) for instance 'U_6' of 'gnd'
   dout2 <= '0';

   -- ModuleWare code(v1.9) for instance 'U_7' of 'gnd'
   dout3 <= '0';

   -- ModuleWare code(v1.9) for instance 'U_1' of 'inv'
   notlru <= NOT(lru);

   -- ModuleWare code(v1.9) for instance 'U_8' of 'vdd'
   dout4 <= '1';

   -- ModuleWare code(v1.9) for instance 'const1' of 'vdd'
   const1 <= '1';

   -- Instance port mappings.
   U_2 : OWordMux2
      PORT MAP (
         A   => newTag,
         B   => newTag1,
         Sel => lru,
         F   => MissFix
      );
   U_9 : OWordMux2
      PORT MAP (
         A   => newTag2,
         B   => newTag3,
         Sel => equal1,
         F   => HitFix
      );
   U_10 : OWordMux2
      PORT MAP (
         A   => HitFix,
         B   => MissFix,
         Sel => Miss,
         F   => newTagFlag
      );
   U_11 : myAnd
      PORT MAP (
         A => Miss,
         B => notlru,
         F => Replace0_internal
      );
   U_12 : myAnd
      PORT MAP (
         A => Miss,
         B => lru,
         F => replace1_internal
      );
   U_13 : myAnd
      PORT MAP (
         A => dirty0,
         B => Replace0_internal,
         F => F1
      );
   U_14 : myAnd
      PORT MAP (
         A => replace1_internal,
         B => dirty1,
         F => F
      );
   U_0 : myOr
      PORT MAP (
         A => dirty0,
         B => dirtying,
         F => dout
      );
   U_3 : myOr
      PORT MAP (
         A => dirtying,
         B => dirty1,
         F => dout1
      );
   U_4 : myOr
      PORT MAP (
         A => F1,
         B => F,
         F => writeBack
      );
   Hit0 : newTagBuilder
      PORT MAP (
         newTag => newTag2,
         tag0   => tag0,
         dirty0 => dout,
         valid0 => valid0,
         tag1   => tag1,
         dirty1 => dirty1,
         valid1 => valid1,
         lru    => dout4
      );
   Hit1 : newTagBuilder
      PORT MAP (
         newTag => newTag3,
         tag0   => tag0,
         dirty0 => dirty0,
         valid0 => valid0,
         tag1   => tag1,
         dirty1 => dout1,
         valid1 => valid1,
         lru    => dout2
      );
   MissLru0 : newTagBuilder
      PORT MAP (
         newTag => newTag,
         tag0   => wantedTag,
         dirty0 => dirtying,
         valid0 => const1,
         tag1   => tag1,
         dirty1 => dirty1,
         valid1 => valid1,
         lru    => const1
      );
   MissLru1 : newTagBuilder
      PORT MAP (
         newTag => newTag1,
         tag0   => tag0,
         dirty0 => dirty0,
         valid0 => valid0,
         tag1   => wantedTag,
         dirty1 => dirtying,
         valid1 => const1,
         lru    => dout3
      );

   -- Implicit buffered output assignments
   Replace0 <= Replace0_internal;
   replace1 <= replace1_internal;

END struct;
