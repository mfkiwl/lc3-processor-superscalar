-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:29 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      MREAD_L      : IN     std_logic;
      Miss         : IN     std_logic;
      PMRESP_H     : IN     STD_LOGIC;
      RESET_L      : IN     std_logic;
      ReplaceCache : IN     std_logic;
      clk          : IN     std_logic;
      dirtying     : IN     std_logic;
      writeBack    : IN     std_logic;
      ForceWrite   : OUT    std_logic;
      PMREAD_L     : OUT    STD_LOGIC;
      PMWRITE_L    : OUT    STD_LOGIC;
      PickAddr     : OUT    STD_LOGIC;
      WriteCache   : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:29 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      Reset,
      idle,
      missed,
      Write,
      Cache
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      MREAD_L,
      Miss,
      PMRESP_H,
      current_state,
      dirtying,
      writeBack
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            next_state <= idle;
         WHEN idle => 
            IF ((writeBack = '1') and
                ((MREAD_L = '0') or (dirtying = '1'))) THEN 
               next_state <= Write;
            ELSIF ((Miss = '1') and
                   ((MREAD_L = '0') or (dirtying = '1'))) THEN 
               next_state <= missed;
            ELSE
               next_state <= idle;
            END IF;
         WHEN missed => 
            IF (PMRESP_H = '1') THEN 
               next_state <= Cache;
            ELSE
               next_state <= missed;
            END IF;
         WHEN Write => 
            IF ((Miss = '1') and
                (PMRESP_H = '1')) THEN 
               next_state <= missed;
            ELSIF (PMRESP_H = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= Write;
            END IF;
         WHEN Cache => 
            next_state <= idle;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ForceWrite <= '0';
      PMREAD_L <= '1';
      PMWRITE_L <= '1';
      PickAddr <= '1';
      WriteCache <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN missed => 
            PMREAD_L<='0' after 5ns;
            ForceWrite<='1';
         WHEN Write => 
            PickAddr<='0';
            PMWRITE_L<='0' after 5ns;
         WHEN Cache => 
            WriteCache<='1';
            ForceWrite<='1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
