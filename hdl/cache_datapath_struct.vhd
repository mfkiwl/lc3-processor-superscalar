-- VHDL Entity ece411.Cache_Datapath.interface
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:32 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Datapath IS
   PORT( 
      Address      : IN     LC3b_word;
      DataOut      : IN     LC3B_WORD;
      ForceWrite   : IN     std_logic;
      MREAD_L      : IN     std_logic;
      MWRITEH_L    : IN     std_logic;
      MWRITEL_L    : IN     std_logic;
      PMDATAIN     : IN     LC3B_OWORD;
      PickAddr     : IN     STD_LOGIC;
      RESET_L      : IN     std_logic;
      WriteCache   : IN     std_logic;
      clk          : IN     std_logic;
      DataIn       : OUT    LC3B_WORD;
      Miss         : OUT    std_logic;
      PMADDRESS    : OUT    LC3B_WORD;
      PMDATAOUT    : OUT    LC3B_OWORD;
      ReplaceCache : OUT    std_logic;
      dirtying     : OUT    std_logic;
      writeBack    : OUT    std_logic
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:33 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL DataOut1       : LC3B_OWORD;
   SIGNAL DataOut2       : LC3B_OWORD;
   SIGNAL F              : std_logic;
   SIGNAL F1             : LC3b_word;
   SIGNAL FixedDataOut   : LC3B_OWORD;
   SIGNAL Index          : LC3B_C_INDEX;
   SIGNAL LagTag         : LC3B_C_TAG;
   SIGNAL Replace0       : std_logic;
   SIGNAL data           : LC3B_OWORD;
   SIGNAL dirty0         : std_logic;
   SIGNAL dirty1         : std_logic;
   SIGNAL doingMemAccess : std_logic;
   SIGNAL equal          : std_logic;
   SIGNAL equal1         : std_logic;
   SIGNAL evict0         : LC3b_word;
   SIGNAL evict1         : LC3b_word;
   SIGNAL line           : LC3B_OWORD;
   SIGNAL lru            : std_logic;
   SIGNAL newTagFlag     : LC3B_OWORD;
   SIGNAL offsetIntoLine : LC3B_C_OFFSET;
   SIGNAL output         : std_logic;
   SIGNAL replace1       : std_logic;
   SIGNAL tag0           : LC3B_C_TAG;
   SIGNAL tag1           : LC3B_C_TAG;
   SIGNAL tagAndFlags    : LC3B_OWORD;
   SIGNAL valid0         : std_logic;
   SIGNAL valid1         : std_logic;
   SIGNAL wantedTag      : LC3B_C_TAG;
   SIGNAL writeFlags     : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL Miss_internal      : std_logic;
   SIGNAL dirtying_internal  : std_logic;
   SIGNAL writeBack_internal : std_logic;


   -- Component Declarations
   COMPONENT DataArray
   PORT (
      DataIn    : IN     LC3B_OWORD;
      DataWrite : IN     std_logic;
      Index     : IN     LC3B_C_INDEX;
      Reset_L   : IN     std_logic;
      DataOut   : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT DataOutOffSet
   PORT (
      DataOut        : IN     LC3B_WORD ;
      MWRITEH_L      : IN     std_logic ;
      MWRITEL_L      : IN     std_logic ;
      data           : IN     LC3B_OWORD ;
      offsetIntoLine : IN     LC3B_C_OFFSET ;
      FixedDataOut   : OUT    LC3B_OWORD 
   );
   END COMPONENT;
   COMPONENT LRU_AND_TAGS
   PORT (
      Miss       : IN     std_logic ;
      dirty0     : IN     std_logic ;
      dirty1     : IN     std_logic ;
      dirtying   : IN     std_logic ;
      equal1     : IN     std_logic ;
      lru        : IN     std_logic ;
      tag0       : IN     LC3B_C_TAG ;
      tag1       : IN     LC3B_C_TAG ;
      valid0     : IN     std_logic ;
      valid1     : IN     std_logic ;
      wantedTag  : IN     LC3B_C_TAG ;
      Replace0   : OUT    std_logic ;
      newTagFlag : OUT    LC3B_OWORD ;
      replace1   : OUT    std_logic ;
      writeBack  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      A   : IN     LC3B_OWORD;
      B   : IN     LC3B_OWORD;
      Sel : IN     std_logic;
      F   : OUT    LC3B_OWORD
   );
   END COMPONENT;
   COMPONENT ToWriteOrNot
   PORT (
      MREAD_L        : IN     std_logic ;
      MWRITEH_L      : IN     std_logic ;
      MWRITEL_L      : IN     std_logic ;
      Miss           : IN     std_logic ;
      WriteCache     : IN     std_logic ;
      writeFlags     : OUT    std_logic ;
      doingMemAccess : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WriteWay
   PORT (
      Miss           : IN     std_logic;
      Replace        : IN     std_logic;
      dirtying       : IN     std_logic;
      doingMemAccess : IN     std_logic;
      forceWrite     : IN     std_logic;
      selected       : IN     std_logic;
      writeBack      : IN     std_logic;
      output         : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT breakUpAddress
   PORT (
      Address        : IN     LC3b_word ;
      Index          : OUT    LC3B_C_INDEX ;
      offsetIntoLine : OUT    LC3B_C_OFFSET ;
      wantedTag      : OUT    LC3B_C_TAG 
   );
   END COMPONENT;
   COMPONENT delayBlock
   PORT (
      wantedTag : IN     LC3B_C_TAG ;
      LagTag    : OUT    LC3B_C_TAG 
   );
   END COMPONENT;
   COMPONENT nand2
   PORT (
      A : IN     std_logic;
      B : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT nor2
   PORT (
      A : IN     std_logic;
      B : IN     std_logic;
      F : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT offset
   PORT (
      line           : IN     LC3B_OWORD ;
      offsetIntoLine : IN     LC3B_C_OFFSET ;
      DataIn         : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT tagCheck
   PORT (
      A     : IN     LC3B_C_TAG;
      B     : IN     LC3B_C_TAG;
      valid : IN     std_logic;
      equal : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT tagFlagSplit
   PORT (
      tagAndFlags : IN     LC3B_OWORD ;
      tag0        : OUT    LC3B_C_TAG ;
      dirty0      : OUT    std_logic ;
      valid0      : OUT    std_logic ;
      tag1        : OUT    LC3B_C_TAG ;
      dirty1      : OUT    std_logic ;
      valid1      : OUT    std_logic ;
      lru         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT writeBackAddr
   PORT (
      Address : IN     LC3b_word ;
      tag0    : IN     LC3B_C_TAG ;
      tag1    : IN     LC3B_C_TAG ;
      evict0  : OUT    LC3b_word ;
      evict1  : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : DataArray USE ENTITY ece411.DataArray;
   FOR ALL : DataOutOffSet USE ENTITY ece411.DataOutOffSet;
   FOR ALL : LRU_AND_TAGS USE ENTITY ece411.LRU_AND_TAGS;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : ToWriteOrNot USE ENTITY ece411.ToWriteOrNot;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WriteWay USE ENTITY ece411.WriteWay;
   FOR ALL : breakUpAddress USE ENTITY ece411.breakUpAddress;
   FOR ALL : delayBlock USE ENTITY ece411.delayBlock;
   FOR ALL : nand2 USE ENTITY ece411.nand2;
   FOR ALL : nor2 USE ENTITY ece411.nor2;
   FOR ALL : offset USE ENTITY ece411.offset;
   FOR ALL : tagCheck USE ENTITY ece411.tagCheck;
   FOR ALL : tagFlagSplit USE ENTITY ece411.tagFlagSplit;
   FOR ALL : writeBackAddr USE ENTITY ece411.writeBackAddr;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   Way0 : DataArray
      PORT MAP (
         Reset_L   => RESET_L,
         DataWrite => F,
         Index     => Index,
         DataIn    => FixedDataOut,
         DataOut   => DataOut1
      );
   Way1 : DataArray
      PORT MAP (
         Reset_L   => RESET_L,
         DataWrite => output,
         Index     => Index,
         DataIn    => FixedDataOut,
         DataOut   => DataOut2
      );
   tagsFlags : DataArray
      PORT MAP (
         Reset_L   => RESET_L,
         DataWrite => writeFlags,
         Index     => Index,
         DataIn    => newTagFlag,
         DataOut   => tagAndFlags
      );
   U_3 : DataOutOffSet
      PORT MAP (
         DataOut        => DataOut,
         MWRITEH_L      => MWRITEH_L,
         MWRITEL_L      => MWRITEL_L,
         data           => data,
         offsetIntoLine => offsetIntoLine,
         FixedDataOut   => FixedDataOut
      );
   U_4 : LRU_AND_TAGS
      PORT MAP (
         Miss       => Miss_internal,
         dirty0     => dirty0,
         dirty1     => dirty1,
         dirtying   => dirtying_internal,
         equal1     => equal1,
         lru        => lru,
         tag0       => tag0,
         tag1       => tag1,
         valid0     => valid0,
         valid1     => valid1,
         wantedTag  => wantedTag,
         Replace0   => Replace0,
         newTagFlag => newTagFlag,
         replace1   => replace1,
         writeBack  => writeBack_internal
      );
   U_0 : OWordMux2
      PORT MAP (
         A   => DataOut1,
         B   => DataOut2,
         Sel => equal1,
         F   => line
      );
   U_6 : OWordMux2
      PORT MAP (
         A   => line,
         B   => PMDATAIN,
         Sel => Miss_internal,
         F   => data
      );
   U_12 : OWordMux2
      PORT MAP (
         A   => DataOut1,
         B   => DataOut2,
         Sel => replace1,
         F   => PMDATAOUT
      );
   U_8 : ToWriteOrNot
      PORT MAP (
         MREAD_L        => MREAD_L,
         MWRITEH_L      => MWRITEH_L,
         MWRITEL_L      => MWRITEL_L,
         Miss           => Miss_internal,
         WriteCache     => WriteCache,
         writeFlags     => writeFlags,
         doingMemAccess => doingMemAccess
      );
   U_10 : WordMux2
      PORT MAP (
         A   => evict0,
         B   => evict1,
         Sel => replace1,
         F   => F1
      );
   U_15 : WordMux2
      PORT MAP (
         A   => F1,
         B   => Address,
         Sel => PickAddr,
         F   => PMADDRESS
      );
   U_13 : WriteWay
      PORT MAP (
         forceWrite     => ForceWrite,
         Miss           => Miss_internal,
         Replace        => replace1,
         dirtying       => dirtying_internal,
         doingMemAccess => doingMemAccess,
         selected       => equal1,
         writeBack      => writeBack_internal,
         output         => output
      );
   U_14 : WriteWay
      PORT MAP (
         forceWrite     => ForceWrite,
         Miss           => Miss_internal,
         Replace        => Replace0,
         dirtying       => dirtying_internal,
         doingMemAccess => doingMemAccess,
         selected       => equal,
         writeBack      => writeBack_internal,
         output         => F
      );
   addrSplit : breakUpAddress
      PORT MAP (
         Address        => Address,
         Index          => Index,
         offsetIntoLine => offsetIntoLine,
         wantedTag      => wantedTag
      );
   U_11 : delayBlock
      PORT MAP (
         wantedTag => wantedTag,
         LagTag    => LagTag
      );
   U_7 : nand2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => dirtying_internal
      );
   U_5 : nor2
      PORT MAP (
         A => equal,
         B => equal1,
         F => Miss_internal
      );
   U_2 : offset
      PORT MAP (
         line           => line,
         offsetIntoLine => offsetIntoLine,
         DataIn         => DataIn
      );
   tagCheck0 : tagCheck
      PORT MAP (
         A     => tag0,
         B     => LagTag,
         valid => valid0,
         equal => equal
      );
   tagCheck1 : tagCheck
      PORT MAP (
         A     => tag1,
         B     => LagTag,
         valid => valid1,
         equal => equal1
      );
   U_1 : tagFlagSplit
      PORT MAP (
         tagAndFlags => tagAndFlags,
         tag0        => tag0,
         dirty0      => dirty0,
         valid0      => valid0,
         tag1        => tag1,
         dirty1      => dirty1,
         valid1      => valid1,
         lru         => lru
      );
   U_9 : writeBackAddr
      PORT MAP (
         Address => Address,
         tag0    => tag0,
         tag1    => tag1,
         evict0  => evict0,
         evict1  => evict1
      );

   -- Implicit buffered output assignments
   Miss      <= Miss_internal;
   dirtying  <= dirtying_internal;
   writeBack <= writeBack_internal;

END struct;
