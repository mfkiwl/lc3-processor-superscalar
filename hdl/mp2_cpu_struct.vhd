-- VHDL Entity ece411.mp2_CPU.symbol
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:33 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp2_CPU IS
   PORT( 
      RESET_L : IN     std_logic;
      START_H : IN     std_logic
   );

-- Declarations

END mp2_CPU ;

--
-- VHDL Architecture ece411.mp2_CPU.struct
--
-- Created:
--          by - page10.ews (gelib-057-02.ews.illinois.edu)
--          at - 14:57:33 03/01/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF mp2_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS      : LC3b_word;
   SIGNAL ALUMuxSel    : LC3b_4mux_sel;
   SIGNAL ALUop        : LC3b_aluop;
   SIGNAL CheckN       : std_logic;
   SIGNAL CheckP       : std_logic;
   SIGNAL CheckZ       : std_logic;
   SIGNAL DATAIN       : LC3b_word;
   SIGNAL DATAOUT      : LC3b_word;
   SIGNAL LoadIR       : std_logic;
   SIGNAL LoadMAR      : std_logic;
   SIGNAL LoadMDR      : std_logic;
   SIGNAL LoadNZP      : std_logic;
   SIGNAL LoadPC       : std_logic;
   SIGNAL MARMuxSel    : LC3b_4mux_sel;
   SIGNAL MDRMuxSel    : std_logic;
   SIGNAL MDRZextSel   : std_logic;
   SIGNAL MREAD_L      : std_logic;
   SIGNAL MRESP_H      : std_logic;
   SIGNAL MWRITEH_L    : std_logic;
   SIGNAL MWRITEL_L    : std_logic;
   SIGNAL PCMuxSel     : LC3b_4mux_sel;
   SIGNAL RFMuxSel     : LC3b_4mux_sel;
   SIGNAL RegWrite     : std_logic;
   SIGNAL StoreSR      : std_logic;
   SIGNAL clk          : std_logic := '0';
   SIGNAL destSel      : LC3b_4mux_sel;
   SIGNAL imm5Flag     : std_logic;
   SIGNAL n            : std_logic;
   SIGNAL offset11Flag : std_logic;
   SIGNAL opcode       : LC3b_opcode;
   SIGNAL p            : std_logic;
   SIGNAL shiftAdj6    : std_logic;
   SIGNAL shiftType    : LC3B_SHFTOP;
   SIGNAL trapSel      : std_logic;
   SIGNAL z            : std_logic;


   -- Component Declarations
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic  := '0'
   );
   END COMPONENT;
   COMPONENT Control
   PORT (
      CheckN       : IN     std_logic ;
      CheckP       : IN     std_logic ;
      CheckZ       : IN     std_logic ;
      MRESP_H      : IN     std_logic ;
      RESET_L      : IN     std_logic ;
      START_H      : IN     std_logic ;
      clk          : IN     std_logic ;
      imm5Flag     : IN     std_logic ;
      n            : IN     std_logic ;
      offset11Flag : IN     std_logic ;
      opcode       : IN     LC3b_opcode ;
      p            : IN     std_logic ;
      shiftType    : IN     LC3B_SHFTOP ;
      z            : IN     std_logic ;
      ALUMuxSel    : OUT    LC3b_4mux_sel ;
      ALUop        : OUT    LC3b_aluop ;
      LoadIR       : OUT    std_logic ;
      LoadMAR      : OUT    std_logic ;
      LoadMDR      : OUT    std_logic ;
      LoadNZP      : OUT    std_logic ;
      LoadPC       : OUT    std_logic ;
      MARMuxSel    : OUT    LC3b_4mux_sel ;
      MDRMuxSel    : OUT    std_logic ;
      MDRZextSel   : OUT    std_logic ;
      MREAD_L      : OUT    std_logic ;
      MWRITEH_L    : OUT    std_logic ;
      MWRITEL_L    : OUT    std_logic ;
      PCMuxSel     : OUT    LC3b_4mux_sel ;
      RFMuxSel     : OUT    LC3b_4mux_sel ;
      RegWrite     : OUT    std_logic ;
      StoreSR      : OUT    std_logic ;
      destSel      : OUT    LC3b_4mux_sel ;
      shiftAdj6    : OUT    std_logic ;
      trapSel      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DRAMAuditor
   PORT (
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic ;
      ADDRESS   : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT Datapath
   PORT (
      ALUMuxSel    : IN     LC3b_4mux_sel ;
      ALUop        : IN     LC3b_aluop ;
      DATAIN       : IN     LC3b_word ;
      LoadIR       : IN     std_logic ;
      LoadMAR      : IN     std_logic ;
      LoadMDR      : IN     std_logic ;
      LoadNZP      : IN     std_logic ;
      LoadPC       : IN     std_logic ;
      MARMuxSel    : IN     LC3b_4mux_sel ;
      MDRMuxSel    : IN     std_logic ;
      MDRZextSel   : IN     std_logic ;
      PCMuxSel     : IN     LC3b_4mux_sel ;
      RESET_L      : IN     std_logic ;
      RFMuxSel     : IN     LC3b_4mux_sel ;
      RegWrite     : IN     std_logic ;
      StoreSR      : IN     std_logic ;
      clk          : IN     std_logic ;
      destSel      : IN     LC3b_4mux_sel ;
      shiftAdj6    : IN     std_logic ;
      trapSel      : IN     std_logic ;
      ADDRESS      : OUT    LC3b_word ;
      CheckN       : OUT    std_logic ;
      CheckP       : OUT    std_logic ;
      CheckZ       : OUT    std_logic ;
      DATAOUT      : OUT    LC3b_word ;
      imm5Flag     : OUT    std_logic ;
      n            : OUT    std_logic ;
      offset11Flag : OUT    std_logic ;
      opcode       : OUT    LC3b_opcode ;
      p            : OUT    std_logic ;
      shiftType    : OUT    LC3B_SHFTOP ;
      z            : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Memory
   PORT (
      Address   : IN     LC3b_word ;
      DataOut   : IN     LC3B_WORD ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      clk       : IN     std_logic ;
      DataIn    : OUT    LC3B_WORD ;
      MRESP_H   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CLKgen USE ENTITY ece411.CLKgen;
   FOR ALL : Control USE ENTITY ece411.Control;
   FOR ALL : DRAMAuditor USE ENTITY ece411.DRAMAuditor;
   FOR ALL : Datapath USE ENTITY ece411.Datapath;
   FOR ALL : Memory USE ENTITY ece411.Memory;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   I0 : CLKgen
      PORT MAP (
         clk => clk
      );
   ControlUnit : Control
      PORT MAP (
         CheckN       => CheckN,
         CheckP       => CheckP,
         CheckZ       => CheckZ,
         MRESP_H      => MRESP_H,
         RESET_L      => RESET_L,
         START_H      => START_H,
         clk          => clk,
         imm5Flag     => imm5Flag,
         n            => n,
         offset11Flag => offset11Flag,
         opcode       => opcode,
         p            => p,
         shiftType    => shiftType,
         z            => z,
         ALUMuxSel    => ALUMuxSel,
         ALUop        => ALUop,
         LoadIR       => LoadIR,
         LoadMAR      => LoadMAR,
         LoadMDR      => LoadMDR,
         LoadNZP      => LoadNZP,
         LoadPC       => LoadPC,
         MARMuxSel    => MARMuxSel,
         MDRMuxSel    => MDRMuxSel,
         MDRZextSel   => MDRZextSel,
         MREAD_L      => MREAD_L,
         MWRITEH_L    => MWRITEH_L,
         MWRITEL_L    => MWRITEL_L,
         PCMuxSel     => PCMuxSel,
         RFMuxSel     => RFMuxSel,
         RegWrite     => RegWrite,
         StoreSR      => StoreSR,
         destSel      => destSel,
         shiftAdj6    => shiftAdj6,
         trapSel      => trapSel
      );
   I1 : DRAMAuditor
      PORT MAP (
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         ADDRESS   => ADDRESS
      );
   theDatapath : Datapath
      PORT MAP (
         ALUMuxSel    => ALUMuxSel,
         ALUop        => ALUop,
         DATAIN       => DATAIN,
         LoadIR       => LoadIR,
         LoadMAR      => LoadMAR,
         LoadMDR      => LoadMDR,
         LoadNZP      => LoadNZP,
         LoadPC       => LoadPC,
         MARMuxSel    => MARMuxSel,
         MDRMuxSel    => MDRMuxSel,
         MDRZextSel   => MDRZextSel,
         PCMuxSel     => PCMuxSel,
         RESET_L      => RESET_L,
         RFMuxSel     => RFMuxSel,
         RegWrite     => RegWrite,
         StoreSR      => StoreSR,
         clk          => clk,
         destSel      => destSel,
         shiftAdj6    => shiftAdj6,
         trapSel      => trapSel,
         ADDRESS      => ADDRESS,
         CheckN       => CheckN,
         CheckP       => CheckP,
         CheckZ       => CheckZ,
         DATAOUT      => DATAOUT,
         imm5Flag     => imm5Flag,
         n            => n,
         offset11Flag => offset11Flag,
         opcode       => opcode,
         p            => p,
         shiftType    => shiftType,
         z            => z
      );
   DRAM : Memory
      PORT MAP (
         ADDRESS   => ADDRESS,
         DATAOUT   => DATAOUT,
         MREAD_L   => MREAD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         RESET_L   => RESET_L,
         clk       => clk,
         DATAIN    => DATAIN,
         MRESP_H   => MRESP_H
      );

END struct;
