-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - page10.ews (gelib-057-25.ews.illinois.edu)
--          at - 15:54:40 02/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel    : IN     LC3b_4mux_sel;
      ALUop        : IN     LC3b_aluop;
      DATAIN       : IN     LC3b_word;
      LoadIR       : IN     std_logic;
      LoadMAR      : IN     std_logic;
      LoadMDR      : IN     std_logic;
      LoadNZP      : IN     std_logic;
      LoadPC       : IN     std_logic;
      MARMuxSel    : IN     LC3b_4mux_sel;
      MDRMuxSel    : IN     std_logic;
      MDRZextSel   : IN     std_logic;
      PCMuxSel     : IN     LC3b_4mux_sel;
      RESET_L      : IN     std_logic;
      RFMuxSel     : IN     LC3b_4mux_sel;
      RegWrite     : IN     std_logic;
      StoreSR      : IN     std_logic;
      clk          : IN     std_logic;
      destSel      : IN     LC3b_4mux_sel;
      shiftAdj6    : IN     std_logic;
      trapSel      : IN     std_logic;
      ADDRESS      : OUT    LC3b_word;
      CheckN       : OUT    std_logic;
      CheckP       : OUT    std_logic;
      CheckZ       : OUT    std_logic;
      DATAOUT      : OUT    LC3b_word;
      imm5Flag     : OUT    std_logic;
      n            : OUT    std_logic;
      offset11Flag : OUT    std_logic;
      opcode       : OUT    LC3b_opcode;
      p            : OUT    std_logic;
      shiftType    : OUT    LC3B_SHFTOP;
      z            : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - page10.ews (gelib-057-25.ews.illinois.edu)
--          at - 15:54:40 02/06/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out       : LC3b_word;
   SIGNAL ADJ9out        : LC3b_word;
   SIGNAL ALUMUXOUT      : LC3b_word;
   SIGNAL ALUout         : LC3b_word;
   SIGNAL B              : LC3b_word;
   SIGNAL BRaddout       : LC3b_word;
   SIGNAL F              : LC3b_word;
   SIGNAL F1             : LC3b_word;
   SIGNAL F2             : LC3b_word;
   SIGNAL GenCCout       : LC3b_cc;
   SIGNAL IRDest         : LC3b_reg;
   SIGNAL JSRRaddout     : LC3b_word;
   SIGNAL MARMuxout      : LC3b_word;
   SIGNAL MDRMuxout      : LC3b_word;
   SIGNAL MDRout         : LC3b_word;
   SIGNAL PCMuxOut       : LC3b_word;
   SIGNAL PCPlus2out     : LC3b_word;
   SIGNAL PCout          : LC3b_word;
   SIGNAL RFAout         : LC3b_word;
   SIGNAL RFBout         : LC3b_word;
   SIGNAL RFMuxout       : LC3b_word;
   SIGNAL SrcA           : LC3b_reg;
   SIGNAL SrcB           : LC3b_reg;
   SIGNAL StoreMuxout    : LC3b_reg;
   SIGNAL adj6notShifted : LC3b_word;
   SIGNAL adj6shifted    : LC3b_word;
   SIGNAL byteOut        : LC3b_word;
   SIGNAL dest           : LC3b_reg;
   SIGNAL imm4in         : LC3B_SHIFTYPE;
   SIGNAL imm4out        : LC3b_word;
   SIGNAL imm5in         : LC3B_IMM5;
   SIGNAL imm5out        : LC3b_word;
   SIGNAL index6         : LC3B_INDEX6;
   SIGNAL offset11       : LC3B_OFFSET11;
   SIGNAL offset9        : LC3b_offset9;
   SIGNAL trapvect       : LC3B_TRAPVECT8;
   SIGNAL zextOut        : LC3b_word;
   SIGNAL zextedTrapOut  : LC3b_word;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal : LC3b_word;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      offset11 : IN     LC3B_OFFSET11 ;
      clk      : IN     std_logic ;
      ADJ11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      adj6shifted    : OUT    LC3b_word ;
      adj6notShifted : OUT    LC3b_word ;
      index6         : IN     LC3B_INDEX6 ;
      clk            : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word ;
      clk     : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUMUXOUT : IN     LC3b_word ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      BRaddout : OUT    LC3b_word ;
      clk      : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT DestMux
   PORT (
      clk     : IN     std_logic ;
      destSel : IN     LC3b_4mux_sel ;
      IRDest  : IN     LC3b_reg ;
      dest    : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      GenCCout : OUT    LC3b_cc ;
      clk      : IN     std_logic ;
      RFMuxout : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT IMM4
   PORT (
      clk     : IN     std_logic ;
      imm4out : OUT    LC3b_word ;
      imm4in  : IN     LC3B_SHIFTYPE 
   );
   END COMPONENT;
   COMPONENT IMM5
   PORT (
      clk     : IN     std_logic ;
      imm5in  : IN     LC3B_IMM5 ;
      imm5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR       : IN     std_logic ;
      MDRout       : IN     LC3b_word ;
      SrcA         : OUT    LC3b_reg ;
      SrcB         : OUT    LC3b_reg ;
      imm5in       : OUT    LC3B_IMM5 ;
      offset9      : OUT    LC3b_offset9 ;
      opcode       : OUT    LC3b_opcode ;
      clk          : IN     std_logic ;
      imm5Flag     : OUT    std_logic ;
      offset11Flag : OUT    std_logic ;
      offset11     : OUT    LC3B_OFFSET11 ;
      IRDest       : OUT    LC3b_reg ;
      index6       : OUT    LC3B_INDEX6 ;
      shiftType    : OUT    LC3B_SHFTOP ;
      imm4in       : OUT    LC3B_SHIFTYPE ;
      trapvect     : OUT    LC3B_TRAPVECT8 
   );
   END COMPONENT;
   COMPONENT JSRRadd
   PORT (
      clk        : IN     std_logic ;
      ADJ11out   : IN     LC3b_word ;
      JSRRaddout : OUT    LC3b_word ;
      PCout      : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZBsplit
   PORT (
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic ;
      clk    : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      PCPlus2out : OUT    LC3b_word ;
      clk        : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      clk         : IN     std_logic ;
      RESET_L     : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      RFMuxout    : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      StoreMuxout : OUT    LC3b_reg ;
      clk         : IN     std_logic ;
      IRDest      : IN     LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT byteUp
   PORT (
      ALUout : IN     LC3b_word ;
      clk    : IN     std_logic ;
      B      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT zext8
   PORT (
      shortIn : IN     LC3b_word;
      zextOut : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT zextShiftTrap
   PORT (
      clk           : IN     std_logic ;
      trapvect      : IN     LC3B_TRAPVECT8 ;
      zextedTrapOut : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : DestMux USE ENTITY ece411.DestMux;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IMM4 USE ENTITY ece411.IMM4;
   FOR ALL : IMM5 USE ENTITY ece411.IMM5;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : JSRRadd USE ENTITY ece411.JSRRadd;
   FOR ALL : NZBsplit USE ENTITY ece411.NZBsplit;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : byteUp USE ENTITY ece411.byteUp;
   FOR ALL : zext8 USE ENTITY ece411.zext8;
   FOR ALL : zextShiftTrap USE ENTITY ece411.zextShiftTrap;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   --DATAOUT=MDRout
   DATAOUT <= MDRout;                                      


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         offset11 => offset11,
         clk      => clk,
         ADJ11out => ADJ11out
      );
   aADJ6 : ADJ6
      PORT MAP (
         adj6shifted    => adj6shifted,
         adj6notShifted => adj6notShifted,
         index6         => index6,
         clk            => clk
      );
   aADJ9 : ADJ9
      PORT MAP (
         offset9 => offset9,
         ADJ9out => ADJ9out,
         clk     => clk
      );
   aALU : ALU
      PORT MAP (
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUMUXOUT => ALUMUXOUT,
         ALUout    => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         PCout    => PCout,
         BRaddout => BRaddout,
         clk      => clk
      );
   aDestMux : DestMux
      PORT MAP (
         clk     => clk,
         destSel => destSel,
         IRDest  => IRDest,
         dest    => dest
      );
   aGenCC : GenCC
      PORT MAP (
         GenCCout => GenCCout,
         clk      => clk,
         RFMuxout => RFMuxout
      );
   U_1 : IMM4
      PORT MAP (
         clk     => clk,
         imm4out => imm4out,
         imm4in  => imm4in
      );
   U_0 : IMM5
      PORT MAP (
         clk     => clk,
         imm5in  => imm5in,
         imm5out => imm5out
      );
   aIR : IR
      PORT MAP (
         LoadIR       => LoadIR,
         MDRout       => MDRout,
         SrcA         => SrcA,
         SrcB         => SrcB,
         imm5in       => imm5in,
         offset9      => offset9,
         opcode       => opcode,
         clk          => clk,
         imm5Flag     => imm5Flag,
         offset11Flag => offset11Flag,
         offset11     => offset11,
         IRDest       => IRDest,
         index6       => index6,
         shiftType    => shiftType,
         imm4in       => imm4in,
         trapvect     => trapvect
      );
   aJSRRadd : JSRRadd
      PORT MAP (
         clk        => clk,
         ADJ11out   => ADJ11out,
         JSRRaddout => JSRRaddout,
         PCout      => PCout
      );
   aNZPsplit : NZBsplit
      PORT MAP (
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ,
         clk    => clk
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         PCPlus2out => PCPlus2out,
         clk        => clk
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS_internal
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxOut,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         RFAout      => RFAout,
         RFBout      => RFBout,
         clk         => clk,
         RESET_L     => RESET_L,
         dest        => dest,
         RFMuxout    => RFMuxout
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         IRDest      => IRDest
      );
   MDRMUX : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => byteOut,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   U_4 : WordMux2
      PORT MAP (
         A   => RFAout,
         B   => MDRout,
         Sel => trapSel,
         F   => F1
      );
   ZextMDRMux : WordMux2
      PORT MAP (
         A   => MDRout,
         B   => zextOut,
         Sel => MDRZextSel,
         F   => F
      );
   adj6ShiftOrNot : WordMux2
      PORT MAP (
         A   => adj6notShifted,
         B   => adj6shifted,
         Sel => shiftAdj6,
         F   => F2
      );
   byteMux : WordMux2
      PORT MAP (
         A   => ALUout,
         B   => B,
         Sel => ADDRESS_internal(0),
         F   => byteOut
      );
   ALUMUX : WordMux4
      PORT MAP (
         A   => RFBout,
         B   => imm5out,
         C   => F2,
         D   => imm4out,
         Sel => ALUMuxSel,
         F   => ALUMUXOUT
      );
   MARMUX : WordMux4
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         C   => MDRout,
         D   => zextedTrapOut,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   PCMUX : WordMux4
      PORT MAP (
         A   => PCPlus2out,
         B   => BRaddout,
         C   => F1,
         D   => JSRRaddout,
         Sel => PCMuxSel,
         F   => PCMuxOut
      );
   RFMUX : WordMux4
      PORT MAP (
         A   => F,
         B   => ALUout,
         C   => BRaddout,
         D   => PCout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   U_2 : byteUp
      PORT MAP (
         ALUout => ALUout,
         clk    => clk,
         B      => B
      );
   mdrzext : zext8
      PORT MAP (
         shortIn => MDRout,
         zextOut => zextOut
      );
   U_3 : zextShiftTrap
      PORT MAP (
         clk           => clk,
         trapvect      => trapvect,
         zextedTrapOut => zextedTrapOut
      );

   -- Implicit buffered output assignments
   ADDRESS <= ADDRESS_internal;

END struct;
